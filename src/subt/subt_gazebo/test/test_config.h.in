/*
 * Copyright (C) 2018 Open Source Robotics Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
*/

#ifndef SUBT_GAZEBO_TEST_CONFIG_HH_
#define SUBT_GAZEBO_TEST_CONFIG_HH_

#define SUBT_GAZEBO_PROJECT_SOURCE_PATH "${PROJECT_SOURCE_DIR}"

#include <chrono>
#include <cstdlib>
#include <random>
#include <string>
#include <thread>

namespace subt
{
  /// \brief Initialize the Gazebo environment for running tests.
  void initGazeboEnv()
  {
    std::string worldPath = SUBT_GAZEBO_PROJECT_SOURCE_PATH "/worlds";
    char *current = std::getenv("GAZEBO_RESOURCE_PATH");
    if (current)
      worldPath += ":" + std::string(current);

    // Needed to find the world files.
    setenv("GAZEBO_RESOURCE_PATH", worldPath.c_str(), 1);

    std::string modelPath = SUBT_GAZEBO_PROJECT_SOURCE_PATH "/models";
    current = std::getenv("GAZEBO_MODEL_PATH");
    if (current)
      modelPath += ":" + std::string(current);

    // Needed to find the models.
    setenv("GAZEBO_MODEL_PATH", modelPath.c_str(), 1);
  }

  /// \brief Wait until a boolean variable is set to true for a given number
  /// of times.
  /// \param[in out] _boolVar The bool variable.
  /// \param[in] _sleepEach Time duration to wait between each retry.
  /// \param[in] _retries The number of retries.
  ///
  /// E.g.:
  ///   using namespace std::chrono_literals;
  ///   waitUntilBoolVar(myVar, 1ms, 10);
  template <class Rep, class Period>
  void waitUntilBoolVar(
      bool &_boolVar,
      const std::chrono::duration<Rep, Period> &_sleepEach,
      const int _retries)
  {
    int i = 0;
    while (!_boolVar && i < _retries)
    {
      ++i;
      std::this_thread::sleep_for(_sleepEach);
    }
  }

  /// \brief Get a random number based on an integer converted to string.
  /// \return A random integer converted to string.
  std::string getRandomNumber()
  {
    // Initialize random number generator.
    uint32_t seed = std::random_device {}();
    std::mt19937 randGenerator(seed);

    // Create a random number based on an integer converted to string.
    std::uniform_int_distribution<int32_t> d(0, INT_MAX);

    return std::to_string(d(randGenerator));
  }
}

#endif  // header guard
